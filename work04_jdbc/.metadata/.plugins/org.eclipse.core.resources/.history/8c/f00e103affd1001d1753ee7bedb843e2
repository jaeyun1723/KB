package jdbc.dao.impl;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.DuplicateFormatFlagsException;

import javax.naming.spi.DirStateFactory.Result;

import com.jdbc.domain.Customer;

import config.ServerInfo;
import jdbc.dao.MemberDAO;
import jdbc.dto.Member;
import jdbc.exception.DuplicateIDException;
import jdbc.exception.RecordNotFoundException;

public class MemberDAOImpl implements MemberDAO {

	private static MemberDAOImpl dao = new MemberDAOImpl();

	private MemberDAOImpl() {
	}

	private static MemberDAOImpl getInstance() {
		return dao;
	}

	@Override
	public Connection getConnect() throws SQLException {
		Connection conn = DriverManager.getConnection(ServerInfo.URL, ServerInfo.USER, ServerInfo.PASS);
		System.out.println("DB Connection....OK");
		return conn;
	}

	@Override
	public void closeAll(Connection conn, PreparedStatement ps) throws SQLException {
		if (ps != null)
			ps.close();
		if (conn != null)
			conn.close();
	}

	@Override
	public void closeAll(Connection conn, PreparedStatement ps, ResultSet rs) throws SQLException {
		if (rs != null)
			rs.close();
		closeAll(conn, ps);
	}

	private boolean phoneExist(String phone, Connection conn) throws SQLException {
		PreparedStatement ps = null;
		ResultSet rs = null;
		String query = "SELECT phone FROM member WHERE phone=?";
		ps = conn.prepareStatement(query);
		ps.setString(1, phone);
		rs = ps.executeQuery();
		return rs.next();
	}

	private boolean idExist(int id, Connection conn) throws SQLException {
		PreparedStatement ps = null;
		ResultSet rs = null;
		String query = "SELECT id FROM member WHERE id=?";
		ps = conn.prepareStatement(query);
		ps.setInt(1, id);
		rs = ps.executeQuery();
		return rs.next();
	}

	@Override
	public void insertMember(Member vo) throws SQLException, DuplicateIDException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = getConnect();
			if (!phoneExist(vo.getPhone(), conn)) {
				String query = "INSERT INTO member(id, name, email, phone) VALUES (?,?,?,?)";
				ps = conn.prepareStatement(query);
				ps.setString(1, "seq_id.NEXTVAL");
				ps.setString(2, vo.getName());
				ps.setString(3, vo.getEmail());
				ps.setString(4, vo.getPhone());
				System.out.println(ps.executeUpdate() + " [INSERT] SUCCESS");
			} else {
				throw new DuplicateIDException("이미 존재하는 고객입니다.");
			}
		} finally {
			closeAll(conn, ps);
		}
	}

	@Override
	public void deleteMember(int id) throws SQLException, RecordNotFoundException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = getConnect();
			if (idExist(id, conn)) { // 삭제할 대상이 있다면
				String query = "DELETE member WHERE id=?";
				ps = conn.prepareStatement(query);
				ps.setInt(1, id);
				System.out.println(ps.executeUpdate() + " DELETE OK");
			} else {
				throw new RecordNotFoundException("삭제할 고객이 존재하지 않습니다.");
			}
		} finally {
			closeAll(conn, ps);
		}
	}

	@Override
	public void updateMember(Member vo) throws SQLException, RecordNotFoundException {
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			conn = getConnect();
			if (phoneExist(vo.getPhone(), conn)) { 
				String query = "UPDATE member SET name=?, email=? WHERE phone=?";
				ps = conn.prepareStatement(query);
				ps.setString(1, vo.getName());
				ps.setString(2, vo.getEmail());
				ps.setString(3, vo.getPhone());
				System.out.println(ps.executeUpdate() + "UPDATE OK");
			} else {
				throw new RecordNotFoundException("변경할 고객이 존재하지 않습니다.");
			}
		} finally {
			closeAll(conn, ps);
		}
	}

	@Override
	public Member getMember(int id) throws SQLException, RecordNotFoundException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public ArrayList<Member> getMember() throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public ArrayList<Member> getMember(String name) throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

}
