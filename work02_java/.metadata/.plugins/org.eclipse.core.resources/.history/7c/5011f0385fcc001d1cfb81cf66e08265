package com.edu.service;

import com.edu.vo.Employee;
import com.edu.vo.Manager;

/*
 * 기능들만 정의된 Service 클래스
 * 
 * 1. 상속기술 사용 안했을 경우
 * Manager			Engineer			Secretary
 * step 1. 가장 저차원적인 기능 정의
 * >> 추가에 관련된 기능을 정의
 * public void addManager(Manager m) { }
 * public void insertEngin(Engineer eg) { }
 * public void plusSecrataryMember(secratary s){}
 * 
 * step 2.
 * public void addManager(Manager m){}
 * public void addEngineer(Engineer eg){}
 * public void addSecratary(secratary s){}
 * 
 * 2. 상속기술 사용 한 경우
 * 					Employee(다양한 이기종의 자식 클래스들을 단일하게 관리)
 * Manager			Engineer			secratary
 * 
 * step 3.
 * public void addEmployee(Manager m) {}
 * public void addEmployee(Engineer m) {}
 * public void addEmployee(secratary m) {}
 * --> Method Overloading : 하는 일은 같지만 처리하는 데이터를 달리할 때 사용
 * 1.메소드 이름 동일
 * 2.메소드 인자값은 다르다.
 * 3.리턴 타입은 상관없다.
 * 
 * step 4. Employee e로 모든 자식들을 받는다...Polymorphic Argument
 * public void addEmployee(Emplyee e){
 * if(e instanceof Manager){ }
 * if(e instanceof Engineer){ }
 * if(e instanceof Secratray){ }
 */

public class EmployeeService {
//	1. 모든 직원의 정보를 출력하는 기능을 정의
	// All, ~s
	public void printAllEmployee(Employee[] ea) {
		for(Employee e : ea) System.out.println(e);
	}

//	2. 모든 직원 중 특정한 직원을 검색하는 기능을 정의
	// find~~, search~~
	public Employee findEmployee(Employee[] ea, int empId) {
		Employee employee = null;
		for(Employee e : ea) {
			if(e.getEmpId()==empId) {
				employee= e; break;
			}
		}
		return employee;
	}

//	3. 모든 직원 중 동일한 부서에서 근무하는 직원을 리턴
	public Employee[] findEmployee(Employee[] ea, String dept) {
		Employee[] temp = new Employee[ea.length];
		for(Employee e : ea) {
			if(((Manager) e).getDept())
		}
		return temp;
	}

//	4. 특정한 직원의 연봉을 리턴하는 기능을 정의
	public int getAnnualSalary(Employee e) {
		int annualSalary = 0;
		
		return annualSalary;
	}
//	5. 모든 직원의 연간 총 인건비를 리턴하는 기능을 정의
	public int getTotalCost(Employee[] ea) {
		int totalCost=0;
		
		return totalCost;;
	}
}
